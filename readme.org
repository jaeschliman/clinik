* clinik

  Common Lisp Including Nikodemus-style Nicknames
  
  The (main) aim of this project is simple:

  I'd like to able to write some Common Lisp libraries using
  package-local nicknames that I'm confident can run on the major
  open-source CL implementations: CCL, SBCL, ABCL, and (eventually)
  ECL.
  

  The (practical) aim of this project is twofold:

** provide a working specification and test-suite for nikodemus-style nicknames

   as far as I know, they are currently implemented in SBCL and ABCL,
   tho still somewhat ad-hoc. browsing through SBCL's commit history
   some weeks(?) ago, I found there was some effort to further specify
   things like what exceptions should be thrown etc. collected links
   to some relevant sbcl commits and their commit messages.


** implement them for CCL

   going for making packages user-subclassable, and defining
   a basic user-package class with a slot for nicknames to live
   etc, and not change the behavior of built-in packages at all.

   this means won't be able to add package-local-nicknames to a package
   that wasn't allocated with them in mind (aka other people's packages)
   which is disappointing, but may open up performance improvements in
   other areas? or it might not. but it can be changed either way.
   
*** Issues:

    When I brought up adding this feature to CCL, The maintainers expressed some reluctance.

      TODO: provide links to gmane discussion on openmcl list
      
      - CCL has some caching optimizations around package lookup, which Mr. Byers indicates
        were added to satisfy a client who found that package lookup was consuming a significant
        portion of their application's runtime. This is with global package names! So any
        modification of the CCL package system will have to integrate with their optimizations,
        and produce as small of a performance hit as possible in the typical case.
        
      - It was also expressed in this discussion that this feature (package-local-nicknames)
        may not be good enough -- I understand this -- the last thing anyone wants is a bunch
        of hacks piling up in an implementation they're maintaining. In the mailing list
        discussion it was proposed to add a special metaclass for non-standard package types
        and then provide the needed specialization via some CLOS methods on package lookup.
        I don't have the chops to provide this implementation for CCL in assembly (which is
	how these internal low-level details are usually handled), but of course would love
	to see it done. Most CL implementations I'm aware of currently have some
        extensions to the package system defined in the CL standard (most commonly package
        locks), and I sympathize with a maintainer wishing to have a better general solution
        than just more special-case hacks for their implementation. (CCL includes a package
        intern hook in addition to the relatively common package locking feature, which is
        used by their (excellent) objective-c bridge.) There's also a branch of SBCL somewhere
        with experiments around user-subclass packages IIRC.

        
        

   
   

   
